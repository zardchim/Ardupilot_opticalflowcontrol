/* ADNS2620 Example Sketch
*  Demonstrates how to use the ADNS2620 Library to interface with the mouse sensor
*  on the ADNS2620 evaluation board from SparkFun Electronics
*
*  More register definitions are located in the 'adns2620.h' file. Read the
*  ADNS2620 datasheet to understand how to use the registers.
*
*  After loading the sketch to the ADNS2620 evaluation board, open the serial terminal
*  using a baud rate of 9600 to see the output from the ADNS2620 sensor.
*
*  Written by Ryan Owens
*  11/4/10
*  SparkFun Electronics
*/

/*
#define CONFIGURATION_REG   0x40
#define STATUS_REG          0x41
#define DELTA_Y_REG         0x42
#define DELTA_X_REG         0x43
#define SQUAL_REG           0x44
#define MAXIMUM_PIXEL_REG   0x45
#define MINIMUM_PIXEL_REG   0x46
#define PIXEL_SUM_REG       0x47
#define PIXEL_DATA_REG      0x48
#define SHUTTER_UPPER_REG   0x49
#define SHUTTER_LOWER_REG   0x4A
#define FRAME_PERIOD	    0x4B
*/

//Add the ADNS2620 Library to the sketch.
#include <avr/io.h>
#include <avr/eeprom.h>
#include <avr/pgmspace.h>
#include <EEPROM.h>
#include "adns2620.h"

// things to add
//   a) ability pull up a menu or go into publish mode
//   b) publish values out to serial port in binary
//   c) set hertz (20, 50, whatever)
//   d) make arduCopter able to read the values
//   e) in arduCopter convert raw values into movement in meters
//   f) add control to use values like obstacle avoidance

// pins to communicate with ADNS2620
#define SDA A1
#define SCL A0

#define START_CHAR 'A'
#define END_CHAR 'Z'

// default serial port and baud
#define MAIN_SERIAL Serial
#define MAIN_SERIAL_BAUD 115200
#define DEFAULT_REFRESH_RATE 20 // default refresh rate is 20

#define OUTPUT_MODE_ASCII 0
#define OUTPUT_MODE_BINARY 1

#define MODE_POSITION_DISPLAY 0
#define MODE_SURFACE_QUALITY_DISPLAY 1

// setting addresses in EEPROM
#define EEPROM_SAFETY_CHECK_ADDR     0
#define EEPROM_OUTPUT_MODE_ADDR      4
#define EEPROM_SERIAL_BAUD_ADDR      8
#define EEPROM_REFRESH_RATE_ADDR    12
#define EEPROM_START_UP_DELAY_ADDR  16

// static object to communicate with mouse
ADNS2620 mouse(SDA,SCL);

#define NUM_BAUD_RATES 8
int baud_rates[] = {4800,9600,14400,19200,28800,38400,57600,115200};

// settings
long serial_baud_rate = 115200;
int refresh_rate = DEFAULT_REFRESH_RATE;  // in hertz
long refresh_delay;   // run loop after this many microseconds 1,000,000 / refresh_rate
int start_up_delay = 0;  // start up in milli seconds
int output_mode = OUTPUT_MODE_BINARY;

// global variables
unsigned long main_loop = 0;
unsigned long current_time = 0;

//
// displayMenu - menu to allow users to change settings
//
void displayMenu()
{
    // local variables
    char value;
    
    // clear out the Serial port
    MAIN_SERIAL.flush();
    
    // until the user chooses to exit
    while( value != 'x' ) {
    
        // display the menu to th user
        MAIN_SERIAL.println();
        MAIN_SERIAL.println("ADNS2620 menu:");
//        MAIN_SERIAL.print("\tb) set serial baud rate (");  MAIN_SERIAL.print(serial_baud_rate);  MAIN_SERIAL.println(")");
//        MAIN_SERIAL.print("\th) set refresh rate (");  MAIN_SERIAL.print(refresh_rate);  MAIN_SERIAL.println(")");
        MAIN_SERIAL.println("\tp) display pixel data");
        MAIN_SERIAL.print("\ts) set start-up delay (");  MAIN_SERIAL.print(start_up_delay);  MAIN_SERIAL.println(" ms)");
        MAIN_SERIAL.print("\tm) set ascii or binary mode (");
        if( output_mode == OUTPUT_MODE_ASCII )
            MAIN_SERIAL.print("ascii");
        if( output_mode == OUTPUT_MODE_BINARY )
            MAIN_SERIAL.print("binary");
        MAIN_SERIAL.println(")");
        
        MAIN_SERIAL.println("\tx) exit");
        MAIN_SERIAL.println();
        
        // get a character from the serial port
        while( !MAIN_SERIAL.available() ) {
            delay(10);
        }
        value = MAIN_SERIAL.read();
        
        switch( value ) {
            case 'b':
                break;
            case 'h':
                break;
            case 'm':
                if( output_mode == OUTPUT_MODE_ASCII ) {
                    output_mode = OUTPUT_MODE_BINARY;
                    MAIN_SERIAL.println("output mode switched to binary.");
                }else{
                    output_mode = OUTPUT_MODE_ASCII;
                    MAIN_SERIAL.println("output mode switched to ascii.");
                }
                break;                
            case 'p':
                displayPixels();
                break;                
            case 's':
                break;
            case 'x':
                break;                
            default:
                // do nothing
                break;
        }
    }
}

//
// displayPixels - dump all pixel data
//
void displayPixels()
{
    // local variables
    int i,x,y;
    int res = ADNS2620_FAIL;
    
    // read a frame
    while( res != ADNS2620_SUCCESS && i < 5 ) {
        res = mouse.get_pixel_data();
        i++;
    }
    
    // display pixels
    if( res == ADNS2620_SUCCESS ) {
        MAIN_SERIAL.println("Pixel Data:");
        for( x=0; x<ADNS2620_MAX_X; x++ ) {
            for( y=0; y<ADNS2620_MAX_Y; y++ ) {
                MAIN_SERIAL.print(mouse.pixel_data[x][y],DEC);
                if( y < ADNS2620_MAX_Y-1 ) {
                    MAIN_SERIAL.print(",");
                }else{
                    MAIN_SERIAL.println();
                }
            }
        }
        MAIN_SERIAL.println("----------------");  
    }else{
        MAIN_SERIAL.println("failed to read pixel data.");
    }
}

//
// dumpValuesToSerial - dump 
//
void dumpValuesToSerial(int mode, char x, char y, char surface_quality)
{
    if( mode == OUTPUT_MODE_BINARY ) {
        MAIN_SERIAL.write(START_CHAR);
        MAIN_SERIAL.write(x);
        MAIN_SERIAL.write(y);
        MAIN_SERIAL.write(surface_quality);
        MAIN_SERIAL.write(END_CHAR);
        //mouse_addChar(START_CHAR);
        //mouse_addChar(x);
        //mouse_addChar(y);
        //mouse_addChar(surface_quality);
        //mouse_addChar(END_CHAR);
    }else{
        MAIN_SERIAL.print(x,DEC);
        MAIN_SERIAL.print(",");
        MAIN_SERIAL.print(y,DEC);
        MAIN_SERIAL.print(",");
        MAIN_SERIAL.println(surface_quality,DEC);
    }
}

//
// readSettings - read settings from eeprom
//
void readSettings()
{
    // read these values from eeprom
    // serial_baud_rate = 115200;
    // refresh_rate = DEFAULT_REFRESH_RATE;
    // refresh_delay = 0;
    // start_up_delay = 0;  // start up in milli seconds
    // output_mode = 5;
}

//
// writeSettings - write settings from eeprom
//

//
// setup 
//
void setup()
{ 
    // read values from eeprom
    
    // double check eeprom values are reasonable
    
    // delay a bit
    delay(start_up_delay);
    
    // open the serial port
    MAIN_SERIAL.begin(MAIN_SERIAL_BAUD);
    
    // default hertz
    if( refresh_rate == 0 ) {
        refresh_delay = 0;
    }else{
        refresh_delay = 1000000 / refresh_rate;
    }

    // initialize the ADNS2620
    mouse.begin();
    delay(1000);
    
    // sync is performed to make sure the ADNS2620 is communicating
    mouse.sync();
    
    // put the ADNS2620 into 'always on' mode.
    mouse.write(CONFIGURATION_REG, 0x01);
    
    // reduce frame rate to improve low light performance
    mouse.set_frame_period(FRAME_PERIOD_FAST);
}

void loop()
{
    // local variables
    int val;
    
    // get current time
    current_time = micros();
    
    // check if enough time has passed to do the next loop
    if( current_time > main_loop ) {
        // display the values
        dumpValuesToSerial(output_mode, mouse.read(DELTA_X_REG),mouse.read(DELTA_Y_REG),mouse.read(SQUAL_REG));
        
        // prepare for next loop
        main_loop = current_time + refresh_delay;
        
        // check for user input
        if( MAIN_SERIAL.available() ) {
            val = MAIN_SERIAL.read();
            if( val == ' ' ) {
                displayMenu();
            }
        }
    }
}
    
    


